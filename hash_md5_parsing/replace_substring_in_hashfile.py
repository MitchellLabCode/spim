import argparse
import codecs

"""Replace a substring everywhere it appears in a hash list text file. This is useful for changing Drive "D:" to "E:" 
and other things like that in the hash lists. 
Written to compare output of md5deep-4.3 software.

Example usage 
-------------
python replace_substring_in_hashfile.py examples/hashlist2.txt \
    examples/hashlist2_fixed.txt "E:\Runt" "D:\Atlas_Data\Runt"

"""


def unescaped_str(arg_str):
    """Define an unescaped string, useful for UNIX systems handling strings generated by Windows"""
    return codecs.decode(str(arg_str), 'unicode_escape')


def replace_str_in_hashfile(input_filename, outfn, findstr, replacestr):
    """Look at each line of a file, replace a substring in that line and write it to a different file outfn.

    Parameters
    ----------
    input_filename: str
        the filename whose substrings to replace
    outfn : str
        the path (full or relative) to the file to make with the replacement
    findstr: str
        the substring to replace
    replacestr: str
        the substring to insert in place of findstr

    Returns
    -------
    <Writes outfn to disk>
    """
    first = True
    with open(input_filename) as f:
        # for line in f:
        #     print line
        for line in f:
            (linea, lineb) = line.split(findstr)
            if first:
                with open(outfn, 'w') as myfile:
                    myfile.write(linea + replacestr + lineb)
                first = False
            else:
                with open(outfn, 'a') as myfile:
                    myfile.write(linea + replacestr + lineb)


if __name__ == "__main__":
    # PARSE ARGUMENTS
    parser = argparse.ArgumentParser(description='Fix a hash list file by replacing one substring with another')
    # Build two positional arguments, infile and outfile
    parser.add_argument('fn', type=str, nargs='?',
                        help='Full or relative path to hash file to fix',
                        default='check_string_for_empty')
    parser.add_argument('outfn', nargs='?', help='Path to output file with string replacement',
                        type=str, default='check_string_for_empty')
    # Two more positional arguments for the substring to find and the one to replace
    parser.add_argument('findstr', nargs='?', help='Substring to replace',
                        type=unescaped_str, default='check_string_for_empty')
    parser.add_argument('replacestr', nargs='?', help='Replacement substring',
                        type=unescaped_str, default='check_string_for_empty')
    args = parser.parse_args()

    print('infile:' + args.fn)
    print('outfile:' + args.outfn)
    print('findstr:' + args.findstr)
    print('replacestr:' + args.replacestr)

    if args.fn == 'check_string_for_empty':
        raise RuntimeError('Must supply filepath for hash list to check')
    if args.outfn == 'check_string_for_empty':
        raise RuntimeError('Must supply filepath for hash list replacement')
    if args.findstr == 'check_string_for_empty':
        raise RuntimeError('Must supply findstr to find')
    if args.replacestr == 'check_string_for_empty':
        raise RuntimeError('Must supply replacestr to replace')

    replace_str_in_hashfile(args.fn, args.outfn, args.findstr, args.replacestr)
